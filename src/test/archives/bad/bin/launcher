#!/usr/bin/env ruby
#
# Copyright 2010 Proofpoint, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


=begin

Options
* start (write pid file)
* restart (touches pid file)
* stop (removes pid file)
* status (check status)
=end

require 'fileutils'
require 'optparse'
require 'pathname'
require 'pp'

def strip(string)
  space = /(\s+)/.match(string)[1]
  string.gsub(/^#{space}/, '')
end

class Pid
  def initialize(path, options = {})
    raise "Nil path provided" if path.nil?
    @options = options
    @path = path
  end

  def save(pid)
    Pathname.new(@path).parent.mkpath
    File.open(@path, "w") { |f| f.puts(pid) }
  end

  def clear()
    File.delete(@path) if File.exists?(@path)
  end

  def alive?
    File.exists?(@path)
  end
end

def restart(options)
  start(options)
end

def start(options)
  pid_file = Pid.new(options[:pid_file])
  if pid_file.alive?
    return :success, "Already running"
  end

  options[:daemon] = true

  pid = 'process'

  pid_file.save(pid)

  return :success, "Started as #{pid}"
end

def stop(options)
  pid_file = Pid.new(options[:pid_file])

  if !pid_file.alive?
    pid_file.clear
    return :success, "Stopped"
  end

  pid_file.clear

  return :success, "Stopped"
end

def status(options)
  pid_file = Pid.new(options[:pid_file])

  if pid_file.alive?
    return :running, "Running"
  else
    return :not_running, "Not running"
  end
end

commands = [:run, :restart, :start, :stop, :status]
install_path = Pathname.new(__FILE__).parent.parent.expand_path

# initialize defaults
options = {
        :pid_file => File.join(install_path, 'launcher.pid'),
        :install_path => install_path
        }

option_parser = OptionParser.new do |opts|
  banner = <<-BANNER
    Usage: #{File.basename($0)} [options] <command>

    Commands:
      #{commands.join("\n  ")}

    Options:
  BANNER
  opts.banner = strip(banner)

  opts.on("-v", "--verbose", "Run verbosely") do |v|
    options[:verbose] = true
  end

  opts.on("--pid-file FILE", "Defaults to INSTALL_PATH/var/run/launcher.pid") do |v|
    options[:pid_file] = Pathname.new(v).expand_path
  end

  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit 2
  end
end

option_parser.parse!(ARGV)

puts options.map { |k, v| "#{k}=#{v}"}.join("\n") if options[:verbose]

status_codes = {
        :success => 0,
        :running => 0,
        :not_running => 3
}


error_codes = {
        :generic_error => 1,
        :invalid_args => 2,
        :unsupported => 3,
        :config_missing => 6
}

if ARGV.length != 1
  puts option_parser
  puts
  puts "Expected a single command, got '#{ARGV.join(' ')}'"
  exit error_codes[:invalid_args]
end

command = ARGV[0].to_sym

unless commands.include?(command)
  puts option_parser
  puts
  puts "Unsupported command: #{command}"
  exit error_codes[:unsupported]
end

code, message = send(command, options)
puts message unless message.nil?
exit status_codes[code]

